// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('And');
gettext('Not');
gettext('Or');
gettext('Testbenches');
gettext('Xor');
gettext('And-Bus');
gettext('And-Busen');
gettext('And-Op');
gettext('And2');
gettext('Two bits input And gate');
gettext('And-Bus2');
gettext('AND-BUS2. And gate with 2-bits bus input');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('And-Busen2');
gettext('AND-Busen-2: Enable a 2-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('Enable input');
gettext('Bus input');
gettext('Bus output');
gettext('And-Op-2');
gettext('AND-Op2: And operation between two numbers of 2 bits');
gettext('Operand 1');
gettext('Operand 2');
gettext('01-bit');
gettext('Not');
gettext('NOT gate (Verilog implementation)');
gettext('Input');
gettext('Output');
gettext('Or-Bus');
gettext('Or2');
gettext('OR2: Two bits input OR gate');
gettext('Or3');
gettext('OR3: Three bits input OR gate');
gettext('Or4');
gettext('OR4: Four bits input OR gate');
gettext('Or7');
gettext('Or7: Seven bits input OR gate');
gettext('Or8');
gettext('OR8: Eight bits input OR gate');
gettext('Or-bus2');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('Or-bus3');
gettext('OR-BUS3: OR gate with 3-bits bus input');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Or-bus4');
gettext('OR-BUS4: OR gate with 4-bits bus input');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Or-bus7');
gettext('OR-BUS7: OR gate with 7-bits bus input');
gettext('Bus7-Split-all: Split the 7-bits bus into its wires');
gettext('Or-bus8');
gettext('OR-BUS8: OR gate with 8-bits bus input');
gettext('Bus8-Split-all: Split the 8-bits bus into its wires');
gettext('TB_Display');
gettext('Display the Testbench result on the LEDs');
gettext('Secuencia del coche fantástico, con entrada de enable');
gettext('Corazón de bombeo de tics con periodo paramétrico de milisegundos y entrada de enable');
gettext('Contador módulo M, ascendente, de 4 bits, con reset ');
gettext('Circuito combinacional de 4 entradas y 8 salidas');
gettext('Baliza luminosa de 1 led. Parpadea a 2Hz cuando se activa');
gettext('Bombear 2 bits por segundo');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('Puerta AND');
gettext('Multiplicador de cables. Genera un bus de 8 bits, a patir del bit de entrada');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('### SUCESS animation');
gettext('### Test not passed');
gettext('Sequence state: on/off');
gettext('The \"Knight rider\" sequence  \non the LEDs');
gettext('Blink all the leds at the  \nsame time');
gettext('**Parámetro**: Módulo del contador');
gettext('**Baliza luminosa**\n\nParpadeo del LED a 2Hz');
gettext('Creado a partir de un **corazón  \ngenérico**, dando el valor adecuado  \na su parámetro frecuencia');
gettext('TB_not');
gettext('Testbench for the not gate');
gettext('Circuito combinacional de 4 entradas y 2 salidas');
gettext('Separador de bus de 2-bits en dos cables');
gettext('Comparador de dos operandos de 1 bit');
gettext('Puerta NOT');
gettext('Demultiplexor de 1 bit, de 1 a 2');
gettext('16B memory icerok probe');
gettext('16B memory. Bus interface');
gettext('16 Bytes Synchronous memory');
gettext('Join the fields into one 16B memory bus');
gettext('Split a 16B memory bus into its fields');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('16B memory sample machine. Captura the input data and store it in the memory');
gettext('Puerta OR');
gettext('8-bits register (in verilog)');
gettext('Un bit constante a 1');
gettext('Multiplexor de 2 a 1 de 14 bits');
gettext('Máquina de contar, de 4 bits');
gettext('Biestable de almacenamiento del estado de la máquina');
gettext('Detector de flancos de subida y bajada. Emite tic por las salidas correspondientes al detecta los flancos');
gettext('Registro de 4 bits con entrada de reset');
gettext('Sumador de un operando de 4 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 4 bits');
gettext('Valor genérico constante (menos 1), de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('16B memory download machine');
gettext('Un bit constante a 0');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Transmit one character to the STDOUT bus');
gettext('Extract the next signal from the stdout bus');
gettext('10 bits, 2-1 Multiplexor');
gettext('stdout bus joiner (data + tic)');
gettext('Serial transmiter for the stdout bus (1 char buffer). Sysclk parameter');
gettext('stdout bus splitter into data and tic signals');
gettext('Convert the 1-bit next signal into a 10-bit stdout bus');
gettext('Serial transmitter with a buffer for 1 byte');
gettext('1-byte buffer');
gettext('Registro de 8 bits');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Serial transmitter with system clock freq parameter');
gettext('6 channel icerok probe adaptor');
gettext('Agregador de 2 buses de 4-bits a bus de 8-bits');
gettext('Agregador de 4 cables en un bus de 4-bits');
gettext('Máquina de contar, de 4 bits, con entrada de stop');
gettext('## Icerok-probe machine\n\nMachine for capturing data, storing it in the memory and transmit  \nto the computer by serial port');
gettext('Writing the data to the memory on  \nevery system clock cycle');
gettext('Transmiting the raw memory contents  \nto the computer, by serial port');
gettext('When the sampling is done  \ntransmit the information to  \nthe computer');
gettext('Memory were the data  \nis stored');
gettext('Reading data from memory  \nReading bus status');
gettext('Calculate if the bus can be taken');
gettext('The bus is available');
gettext('This circuits wants  \nto use the bus');
gettext('The bus has been already  \ntaken');
gettext('One cycle after the machine is done  \nthe bus is already taken to write  \nthe bbusy signal to 0 and allow  \nother circuits to use it');
gettext('The output bus is controlled  \nby this circuit (1) or  \nremain untouched (0)');
gettext('The reading machine  \ncan be started');
gettext('## Sample machine\n\nRead the input data, (one byte per clock cycle) and store it into the memory\n\n');
gettext('**Reloj del sistema**');
gettext('**Estado de**  \n**la máquina**');
gettext('Máquina encendida');
gettext('Máquina apagada  \n(rst = 1)');
gettext('Tic de arranque');
gettext('Tic de fin');
gettext('**Contador de ciclos**');
gettext('Número de ciclos  \ncontados');
gettext('Valor  \nincrementado');
gettext('### Salidas');
gettext('Estado de la máquina');
gettext('Ciclo actual');
gettext('Cuenta finalizada');
gettext('Ejecutar el ciclo');
gettext('Número de ciclos  \na contar');
gettext('¿Estamos en el  \nciclo k-1?');
gettext('Solo se hace caso a la  \nentrada next si la  \nmáquina está encendida');
gettext('Nuevo ciclo');
gettext('Si es el ciclo k-1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Apagar la  \nmáquina');
gettext('Ciclo nuevo:  \nincrementar la cuenta');
gettext('El tic de start se saca  \npor exec para que se ejecute  \nel primer ciclo');
gettext('Si la máquina está  \napagada, las señales  \nde ejecución no pueden  \nsalir!');
gettext('Retrasar la señal un ciclo  \nmientras que se detecta si  \nla máquina ha finalizado o no');
gettext('**Tic de apagado**');
gettext('**Tic de encendido**');
gettext('**Inicializar**');
gettext('**Estado de la máquina**');
gettext('## Detector doble: flancos de subida y bajada\n\nSe detectan tanto los flancos de subida como de bajada y se emite los  \ntics por sus salidas correspondientes');
gettext('Señal de  \nentrada');
gettext('Reloj del  \nsistema');
gettext('Reading machine');
gettext('## Download machine\n\nTransmit all the memory contents through the serial port  \nThe bytes are transmited raw (in binary). No ascii encoding  \nThere should be a program running on the computer capable of  \nreading these raw bytes');
gettext('## PUTC: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification    \n\nWhen the machine starts, the char is outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The byte from the  \ninput char is transmited');
gettext('Char to be transmited');
gettext('State of the machine:  \n1: ON: transmitting  \n2: OFF: transparent mode  ');
gettext('If the machine is on  \nand the character has been  \ntransmitted: Turn it off');
gettext('The machine has finished');
gettext('**STDOUT BUS**');
gettext('Not connected');
gettext('**Create the bus**  \nfrom the data and tic signals');
gettext('Transparent mode...  \nor not');
gettext('## STDOUT serial\n\nSerial transmitter for the STDOUT bus\n');
gettext('**STDOUT Bus**  \n* Data to transmit (8 bits)  \n* tic (1 bit)\n* data sent (done tic, 1 bit)');
gettext('Empty Buffer  \n(There is no byte  \nwaiting)');
gettext('Byte stored in the  \nbuffer, waiting to be  \ntransmitted when the  \ntransmitter is ready');
gettext('Buffer state:  \n0: empty  \n1: full');
gettext('Transmitter ready');
gettext('If the transmittter is ready  \nand there is a character  \nin the buffer: Transmit!');
gettext('Serial transmitter state');
gettext('Apagado automática,  \ncuando la máquina  \ntermina');
gettext('Apagado manual');
gettext('Xor2');
gettext('XOR gate: two bits input xor gate');
gettext('TESTs');
gettext('00-Index');
gettext('# INDEX: IceGate Collection');
gettext('## AND Menu');
gettext('## Not Menu');
gettext('And-Op2');
gettext('## OR Menu');
gettext('## XOR Menu');
gettext('## TestBenches');
gettext('TB_Not');
gettext('And');
gettext('Not');
gettext('Or');
gettext('Xor');
gettext('And-Bus');
gettext('And-Busen');
gettext('And-Op');
gettext('And2');
gettext('And-Bus2');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND-Bus2 gate: Manual testing with two pushbutton and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('And-Busen-02');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('2bits constant value: 3');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('# AND-Busen2 gate: Manual testing with one pushbutton and two LEDs\n\nWhen the button is pressed, the two LEDs are turned on');
gettext('And-Op-2');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op2: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 2-bits coming form the pushbuttons and a constant  \nnumber (0-3). The result is shown on LEDs 0 and 1\n\nThe number 3 is used by default. It means that the operand coming from the buttons  \nis shown on the LEDs without modification');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND gate: Manual testing with two pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('## And Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   0    |\n| 1   |  0  |   0    |\n| 1   |  1  |   1    |');
gettext('01-bit');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('# Not gate: Manual testing with a pushbutton and an LED\n\nWhen the button SW1 is not pressed, the input is 0. The output of the  \nnot is 1 and the LED is on  \nWhen the button SW1 is pressed, the input is 1, the output 0 and the  \nLED is off');
gettext('Or-Bus');
gettext('Or2');
gettext('Or3');
gettext('Or4');
gettext('Or7');
gettext('Or8');
gettext('Or-Bus2');
gettext('Or-Bus3');
gettext('Or-Bus4');
gettext('Or-Bus7');
gettext('Or-Bus8');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus2 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Constant bit 0');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('# OR-Bus3 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('# OR-Bus4 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus7-Join-all: Join all the wires into a 7-bits Bus');
gettext('# OR-Bus7 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus8-Join-all: Join all the wires into a 8-bits Bus');
gettext('# OR-Bus8 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('## OR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   1    |\n| 1   |  0  |   1    |\n| 1   |  1  |   1    |');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR4 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR7 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR8 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Xor2');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# XOR gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on only if button 1 is pressed or button 2 is pressed but not  \nboth at the same time');
gettext('## XOR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   1    |\n| 1   |  0  |   1    |\n| 1   |  1  |   0    |');
