// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('And');
gettext('Nand');
gettext('Nor');
gettext('Not');
gettext('Or');
gettext('Xnor');
gettext('Xor');
gettext('And-Bus');
gettext('And-Busen');
gettext('And-Op');
gettext('Blocks');
gettext('And2');
gettext('Two bits input And gate');
gettext('And3');
gettext('AND3-verilog. 3- bits input And gate. Verilog implementation');
gettext('And4');
gettext('AND4-verilog. 4-bits input And gate. Verilog implementation');
gettext('And5');
gettext('AND5-verilog. 5-bits input And gate. Verilog implementation');
gettext('And6');
gettext('AND6-verilog. 6-bits input And gate. Verilog implementation');
gettext('And7');
gettext('AND7-verilog. 7-bits input And gate. Verilog implementation');
gettext('And8');
gettext('AND8-verilog. 8-bits input And gate. Verilog implementation');
gettext('Blocks');
gettext('And-Bus2');
gettext('AND-BUS2-verilog. And gate with 2-bits bus input. Verilog implementation');
gettext('And-Bus3');
gettext('AND-BUS3-verilog. And gate with 3-bits bus input. Verilog implementation');
gettext('And-Bus4');
gettext('AND-BUS4-verilog. And gate with 4-bits bus input. Verilog implementation');
gettext('And-Bus5');
gettext('AND-BUS5-verilog. And gate with 5-bits bus input. Verilog implementation');
gettext('And-Bus6');
gettext('AND-BUS6-verilog. And gate with 6-bits bus input. Verilog implementation');
gettext('And-Bus7');
gettext('AND-BUS7-verilog. And gate with 7-bits bus input. Verilog implementation');
gettext('And-Bus8');
gettext('AND-BUS8-verilog. And gate with 8-bits bus input. Verilog implementation');
gettext('And-Bus2');
gettext('AND-BUS2. And gate with 2-bits bus input');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('And-Bus3');
gettext('AND-BUS3. And gate with 3-bits bus input');
gettext('Three bits input And gate');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('And-Bus4');
gettext('AND-BUS4. And gate with 4-bits bus input');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('And-Bus5');
gettext('AND-BUS5. And gate with 5-bits bus input');
gettext('Bus5-Split-3-2: Split the 5-bits bus into two buses of 3 and 2 bits');
gettext('And-Bus6');
gettext('AND-BUS6. And gate with 6-bits bus input');
gettext('Bus6-Split-2-4: Split the 6-bits bus into two buses of 2 and 4 wires');
gettext('And-Bus7');
gettext('AND-BUS7. And gate with 7-bits bus input');
gettext('Bus7-Split-3-4: Split the 7-bits bus into two buses of 3 and 4 wires');
gettext('And-Bus8');
gettext('AND-BUS8. And gate with 8-bits bus input');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Blocks');
gettext('And-Busen2');
gettext('AND-Busen-2-verilog: Enable a 2-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('Enable input');
gettext('Bus input');
gettext('Bus output');
gettext('And-Busen3');
gettext('AND-Busen-3-verilog: Enable a 3-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen4');
gettext('AND-Busen-4-verilog: Enable a 4-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen5');
gettext('AND-Busen-5-verilog: Enable a 5-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen6');
gettext('AND-Busen-6-verilog: Enable a 6-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen7');
gettext('AND-Busen-7-verilog: Enable a 7-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen8');
gettext('AND-Busen-8-verilog: Enable a 8-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen2');
gettext('AND-Busen-2: Enable a 2-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('And-Busen3');
gettext('AND-Busen-3: Enable a 3-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('And-Busen4');
gettext('AND-Busen-4: Enable a 4-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('And-Busen5');
gettext('AND-Busen-5: Enable a 5-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus5-Split-all: Split the 5-bits bus into its wires');
gettext('Bus5-Join-all: Join all the wires into a 5-bits Bus');
gettext('And-Busen6');
gettext('AND-Busen-6: Enable a 6-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus6-Split-half: Split the 6-bits bus into two buses of 3 wires');
gettext('Bus6-Join-half: Join the two buses into a 6-bits Bus');
gettext('And-Busen7');
gettext('AND-Busen-7: Enable a 7-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus7-Split-4-3: Split the 7-bits bus into two buses of 4 and 3 wires');
gettext('Bus7-Join-4-3: Join the two buses into a 7-bits Bus');
gettext('And-Busen8');
gettext('AND-Busen-8: Enable a 8-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('Blocks');
gettext('And-Op-16');
gettext('AND-Op16-verilog: And operation between two numbers of 16 bits. Verilog implementation');
gettext('Operand 1');
gettext('Operand 2');
gettext('And-Op-2');
gettext('AND-Op2-verilog: And operation between two numbers of 2 bits. Verilog implementation');
gettext('And-Op-3');
gettext('AND-Op3-verilog: And operation between two numbers of 3 bits. Verilog implementation');
gettext('And-Op-4');
gettext('AND-Op4-verilog: And operation between two numbers of 4 bits. Verilog implementation');
gettext('And-Op-5');
gettext('AND-Op5-verilog: And operation between two numbers of 5 bits. Verilog implementation');
gettext('And-Op-6');
gettext('AND-Op6-verilog: And operation between two numbers of 6 bits. Verilog implementation');
gettext('And-Op-7');
gettext('AND-Op7-verilog: And operation between two numbers of 7 bits. Verilog implementation');
gettext('And-Op-8');
gettext('AND-Op8-verilog: And operation between two numbers of 8 bits. Verilog implementation');
gettext('And-Op-16');
gettext('AND-Op16: And operation between two numbers of 16 bits');
gettext('AND-Op8: And operation between two numbers of 8 bits');
gettext('AND-Op4: And operation between two numbers of 4 bits');
gettext('AND-Op2: And operation between two numbers of 2 bits');
gettext('Bus4-Split-half: Split the 4-bits bus into two of the same size');
gettext('Bus4-Join-half: Join the two buses into a 4-bits Bus');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('And-Op-2');
gettext('And-Op-3');
gettext('AND-Op3: And operation between two numbers of 3 bits');
gettext('Bus3-Split-2-1: Split the 3-bits bus into two: 2-bit and 1-bits buses');
gettext('Bus3-Join-2-1: Joint two buses of 1 and 2 bits into a 3-bits Bus');
gettext('And-Op-4');
gettext('And-Op-5');
gettext('AND-Op5: And operation between two numbers of 5 bits');
gettext('Bus5-Join-3-2: Join the two buses of 3 and 2 bits into a 5-bits Bus');
gettext('And-Op-6');
gettext('AND-Op6: And operation between two numbers of 6 bits');
gettext('And-Op-7');
gettext('AND-Op7: And operation between two numbers of 7 bits');
gettext('And-Op-8');
gettext('And3');
gettext('And4');
gettext('And5');
gettext('And5: five bits input And gate');
gettext('And6');
gettext('And6: six bits input And gate');
gettext('And7');
gettext('And7: seven bits input And gate');
gettext('And8');
gettext('And8: 8-bits input And gate');
gettext('Blocks');
gettext('Nand2');
gettext('Nand-x02: two input NAND gate. Verilog implementation');
gettext('Nand');
gettext('Nand-x02: two input NAND gate');
gettext('NOT gate (Verilog implementation)');
gettext('Input');
gettext('Output');
gettext('Blocks');
gettext('Nor');
gettext('Nor-x02-verilog: 2 input NOR gate. Verilog implementation');
gettext('Nor');
gettext('Nor-x02: two input NOR gate');
gettext('OR2: Two bits input OR gate');
gettext('Blocks');
gettext('Not-x02');
gettext('not-x2-verilog: 2-bits not gate. Verilog implementation');
gettext('Not-x03');
gettext('not-x3-verilog: 3-bits not gate. Verilog implementation');
gettext('Not-x04');
gettext('not-x4-verilog: 4-bits not gate. Verilog implementation');
gettext('Not-x05');
gettext('not-x5-verilog: 5-bits not gate. Verilog implementation');
gettext('Not-x06');
gettext('not-x6-verilog: 6-bits not gate. Verilog implementation');
gettext('Not-x07');
gettext('not-x7-verilog: 7-bits not gate. Verilog implementation');
gettext('Not-x08');
gettext('not-x8-verilog: 8-bits not gate. Verilog implementation');
gettext('Not-x16');
gettext('not-x16-verilog: 16-bits not gate. Verilog implementation');
gettext('Not-x32');
gettext('not-x32: 32-bits not gate');
gettext('Not');
gettext('Not-x02');
gettext('not-x2: 2-bits not gate');
gettext('Not-x03');
gettext('not-x3: 3-bits not gate');
gettext('Not-x04');
gettext('not-x4: 4-bits not gate');
gettext('Not-x05');
gettext('not-x5: 5-bits not gate');
gettext('Bus5-Join-4-1: Join the two buses of 4 and 1 bits into a 5-bits Bus');
gettext('Bus5-Split-4-1: Split the 5-bits bus into two buses of 4 and 1 bits');
gettext('Not-x06');
gettext('not-x6: 6-bits not gate');
gettext('Bus6-Join-4-2: Join the two buses into a 6-bits Bus');
gettext('Bus6-Split-4-2: Split the 6-bits bus into two buses of 4 and 2 wires');
gettext('Not-x07');
gettext('not-x7: 7-bits not gate');
gettext('Not-x08');
gettext('not-x8: 8-bits not gate');
gettext('Not-x16');
gettext('not-x16: 16-bits not gate');
gettext('Blocks');
gettext('Or-Bus');
gettext('Or-Op');
gettext('Or2');
gettext('Or3');
gettext('OR3-verilog: 3-bits input OR gate. Verilog implementation');
gettext('Or4');
gettext('OR4-verilog: 4-bits input OR gate. Verilog implementation');
gettext('Or5');
gettext('OR5-verilog: 5-bits input OR gate. Verilog implementation');
gettext('Or6');
gettext('OR6-verilog: 6-bits input OR gate. Verilog implementation');
gettext('Or7');
gettext('OR7-verilog: 7-bits input OR gate. Verilog implementation');
gettext('Or8');
gettext('OR8-verilog: 8-bits input OR gate. Verilog implementation');
gettext('Or3');
gettext('OR3: Three bits input OR gate');
gettext('Or4');
gettext('OR4: Four bits input OR gate');
gettext('Or5');
gettext('OR5: 5 bits input OR gate');
gettext('Or6');
gettext('OR6: 6 bits input OR gate');
gettext('Or7');
gettext('Or7: Seven bits input OR gate');
gettext('Or8');
gettext('OR8: Eight bits input OR gate');
gettext('Blocks');
gettext('Or-bus2');
gettext('OR-BUS2-verilog: OR gate with 2-bits bus input. Verilog implementation');
gettext('Or-bus3');
gettext('OR-BUS3-verilog: OR gate with 3-bits bus input. Verilog implementation');
gettext('Or-bus4');
gettext('OR-BUS4-verilog: OR gate with 4-bits bus input. Verilog implementation');
gettext('Or-bus5');
gettext('OR-BUS5-verilog: OR gate with 5-bits bus input. Verilog implementation');
gettext('Or-bus6');
gettext('OR-BUS6-verilog: OR gate with 6-bits bus input. Verilog implementation');
gettext('Or-bus7');
gettext('OR-BUS7-verilog: OR gate with 7-bits bus input. Verilog implementation');
gettext('Or-bus8');
gettext('OR-BUS8-verilog: OR gate with 8-bits bus input. Verilog implementation');
gettext('Or-bus2');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('Or-bus3');
gettext('OR-BUS3: OR gate with 3-bits bus input');
gettext('Or-bus4');
gettext('OR-BUS4: OR gate with 4-bits bus input');
gettext('Or-bus5');
gettext('OR-BUS5: OR gate with 5-bits bus input');
gettext('Or-bus6');
gettext('OR-BUS6: OR gate with 6-bits bus input');
gettext('Or-bus7');
gettext('OR-BUS7: OR gate with 7-bits bus input');
gettext('Bus7-Split-all: Split the 7-bits bus into its wires');
gettext('Or-bus8');
gettext('OR-BUS8: OR gate with 8-bits bus input');
gettext('Bus8-Split-all: Split the 8-bits bus into its wires');
gettext('Blocks');
gettext('Or-Op-16');
gettext('OR-Op16-verilog: Or operation between two numbers of 16 bits. Verilog implementation');
gettext('Or-Op-2');
gettext('OR-Op2-verilog: Or operation between two numbers of 2 bits. Verilog implementation');
gettext('Or-Op-3');
gettext('OR-Op3-verilog: Or operation between two numbers of 3 bits. Verilog implementation');
gettext('Or-Op-4');
gettext('OR-Op4-verilog: Or operation between two numbers of 4 bits. Verilog implementation');
gettext('Or-Op-5');
gettext('OR-Op5-verilog: Or operation between two numbers of 5 bits. Verilog implementation');
gettext('Or-Op-6');
gettext('OR-Op6-verilog: Or operation between two numbers of 6 bits. Verilog implementation');
gettext('Or-Op-7');
gettext('OR-Op7-verilog: Or operation between two numbers of 7 bits. Verilog implementation');
gettext('Or-Op-8');
gettext('OR-Op8-verilog: Or operation between two numbers of 8 bits. Verilog implementation');
gettext('Or-Op-16');
gettext('OR-Op16: Or operation between two numbers of 16 bits');
gettext('OR-Op8: Or operation between two numbers of 8 bits');
gettext('Or-Op4: Or operation between two numbers of 4 bits');
gettext('OR-Op2: Or operation between two numbers of 2 bits');
gettext('Or-Op-2');
gettext('Or-Op-3');
gettext('OR-Op3: Or operation between two numbers of 3 bits');
gettext('Or-Op-4');
gettext('Or-Op-5');
gettext('OR-Op5: And operation between two numbers of 5 bits');
gettext('Or-Op-6');
gettext('OR-Op6: Or operation between two numbers of 6 bits');
gettext('Or-Op-7');
gettext('OR-Op7: OR operation between two numbers of 7 bits');
gettext('Or-Op-8');
gettext('Blocks');
gettext('Xnor-OP');
gettext('Xnor2');
gettext('XNor-x02: two input XNOR gate');
gettext('XOR gate: two bits input xor gate');
gettext('Blocks');
gettext('Xnor-op2');
gettext('XNOR gate-verilog: 2 bits input xnor gate. Verilog implementation');
gettext('Xnor-op3');
gettext('XNOR gate-verilog: 3 bits input xnor gate. Verilog implementation');
gettext('Xnor-op4');
gettext('XNOR gate-verilog: 4 bits input xnor gate. Verilog implementation');
gettext('Xnor-op2');
gettext('XNOR gate: two bits input xnor gate');
gettext('Xnor-op3');
gettext('XNOR-Op3: Xnor operation between two numbers of 3 bits');
gettext('Xnor-op4');
gettext('XNOR-Op4: Xnor operation between two numbers of 4 bits');
gettext('Xor-OP');
gettext('Xor2');
gettext('Xor-op2');
gettext('Xor-op3');
gettext('XOR-Op3: Xor operation between two numbers of 3 bits');
gettext('Xor-op4');
gettext('XOR-Op4: Xor operation between two numbers of 4 bits');
gettext('01-AND-gate');
gettext('02-AND-gate-BUS');
gettext('03-AND-enable');
gettext('04-AND-op');
gettext('05-OR-gate');
gettext('06-OR-gate-BUS');
gettext('07-OR-op');
gettext('08-NOT-gate');
gettext('09-NOT-op');
gettext('10-XOR-gate');
gettext('11-XOR-op');
gettext('12-XNOR-gate');
gettext('13-XNOR-op');
gettext('14-NAND-gate');
gettext('15-NOR-gate');
gettext('TESTs');
gettext('00-Index');
gettext('# INDEX: IceGate Collection');
gettext('## AND');
gettext('## Not ');
gettext('And-Op2');
gettext('## OR ');
gettext('## XOR');
gettext('### 2-bits');
gettext('### 3-bits');
gettext('### 4-bits');
gettext('### 8-bits');
gettext('## NAND');
gettext('## NOR');
gettext('## XNOR');
gettext('### 5-bits');
gettext('### 6-bits');
gettext('### 7-bits');
gettext('Or-Bus2');
gettext('Or-Op2');
gettext('001-Index');
gettext('### 16-bits');
gettext('Alhambra-II');
gettext('NandLand-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('01-And-gate-buttons-LED');
gettext('## INPUTS');
gettext('**AND Gate**');
gettext('## Example: Manual testing of the AND2 gate\n\nThe LED is only ON when the two buttons SW1 and SW2 are pressed');
gettext('## OUTPUT');
gettext('01-And-gate-buttons-LED');
gettext('01-And-gate-buttons-LED');
gettext('01-And-gate-buttons-LED');
gettext('01-And-gate-buttons-LED');
gettext('2bits constant value: 3');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('## Example: Manual testing of the AND2 gate\n\nThe RGB LED is turned GREEN only when the two buttons SW1 and SW2 are ON');
gettext('## RGB LED');
gettext('Red and blue disabled');
gettext('Negative logic');
gettext('Green component');
gettext('Switches are in  \nnegative logic');
gettext('Positive logic here');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('02-And-gate-BUS-buttons-LED');
gettext('**AND-BUS2 Gate**');
gettext('## Example: Manual testing of the AND-BUS2 gate\n\nThe LED is only ON when the two buttons SW1 and SW2 are pressed');
gettext('02-And-gate-BUS-buttons-LED');
gettext('02-And-gate-BUS-buttons-LED');
gettext('02-And-gate-BUS-buttons-LED');
gettext('02-And-gate-BUS-buttons-LED');
gettext('## Example: Manual testing of the AND-BUS2 gate\n\nThe RGB LED is turned GREEN only when the two buttons SW1 and SW2 are ON');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('03-And-enable-buttons-LED');
gettext('4bits constant value: 15 (0xF in hexadecimal)');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('**AND-Busen4**');
gettext('## Example: Manual testing of the AND-Busen4 gate\n\nThe given number by the 4-bits constant (0xF by default) is displayed on the  \nLEDs when the button is pressed');
gettext('Enable button');
gettext('03-And-enable-buttons-LED');
gettext('03-And-enable-buttons-LED');
gettext('03-And-enable-buttons-LED');
gettext('03-And-enable-buttons-LED');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('**AND-Busen3**');
gettext('## Example: Manual testing of the AND-Busen4 gate\n\nThe given number by the 3-bits constant is used to activate the RGB LED  \nChanging this value will change the color displayed on the LED  \nIt only works if the switch s1 is ON  ');
gettext('Enable button  \n(Negative logic)');
gettext('## RGB LED  \n\nNegative logic');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('04-And-op-button-LEDs');
gettext('**AND-Op4**');
gettext('## Example: Manual testing of the AND-Op4 gate\n\nThe AND-Op4 gate perform the AND operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('Operand b or 0');
gettext('Enable the operand b');
gettext('`a AND b`');
gettext('04-And-op-button-LEDs');
gettext('04-And-op-button-LEDs');
gettext('04-And-op-button-LEDs');
gettext('04-And-op-button-LEDs');
gettext('**AND-Op3**');
gettext('## Example: Manual testing of the AND-Op3 gate\n\nThe AND-Op3 gate perform the AND operation between operands a and b.  \nWhen the switch is ON the operand b has a value (`111` by default)  \notherwise operand b is 0\nThe result of the AND operation is shown on the RGB LED');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('05-Or-gate-buttons-LED');
gettext('**OR Gate**');
gettext('## Example: Manual testing of the OR2 gate\n\nThe LED is turned on when any button (or both) are pressed');
gettext('05-Or-gate-buttons-LED');
gettext('05-Or-gate-buttons-LED');
gettext('05-Or-gate-buttons-LED');
gettext('05-Or-gate-buttons-LED');
gettext('## Example: Manual testing of the OR2 gate\n\nThe RGB LED is turned GREEN if either switches s1 or s2 (or both) are ON');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('**OR-BUS2 Gate**');
gettext('## Example: Manual testing of the OR-BUS2 gate\n\nThe LED is ON when any of the buttons (or both) are pressed');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('## Example: Manual testing of the OR-BUS2 gate\n\nThe RGB LED is turned GREEN when any of the switches (or both) are ON');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('07-Or-op-button-LEDs');
gettext('**OR-Op4**');
gettext('## Example: Manual testing of the OR-Op4 gate\n\nThe OR-Op4 gate perform the OR operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('`a OR b`');
gettext('07-Or-op-button-LEDs');
gettext('07-Or-op-button-LEDs');
gettext('07-Or-op-button-LEDs');
gettext('07-Or-op-button-LEDs');
gettext('## Example: Manual testing of the OR-Op3 gate\n\nThe OR-Op3 gate perform the OR operation between operands a and b.  \nWhen the switch is ON the operand b has a value (`001` by default)  \notherwise operand b is 0\nThe result of the OR operation is shown on the RGB LED');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('08-NOT-button-LED');
gettext('**NOT gate**');
gettext('## Example: Manual testing of the NOT gate\n\nThe NOT gate performs the NOT operation on the input comming from  \nthe button. The output is shown on the LEDs  \n');
gettext('## INPUT');
gettext('08-NOT-button-LED');
gettext('08-NOT-button-LED');
gettext('08-NOT-button-LED');
gettext('08-NOT-button-LED');
gettext('## Example: Manual testing of the NOT gate\n\nThe NOT gate performs the NOT operation on the input comming from  \nthe switch. The output turn GREEN the RGB LED  \n');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('09-NOT-op-LEDs');
gettext('## Example: Manual testing of the NOT-4 gate\n\nA 4-bit number is entered as the input of the NOT-4 gate and its output is  \nshown on the LED. If the buton is not pressed, the number is 0, so that all  \nthe LEDs are ON. When the button is pressed the number used in the NOT  \noperation is `0101`. The result is the number `1010` that can be seen on the  \nLED');
gettext('Operand a');
gettext('`NOT a`');
gettext('09-NOT-op-LEDs');
gettext('09-NOT-op-LEDs');
gettext('09-NOT-op-LEDs');
gettext('09-NOT-op-LEDs');
gettext('## Example: Manual testing of the NOT-3 gate\n\nThe 3-bit number introduced in the Swtiches is inverted using the  \nNOT-3 gate. The result is displayed on the RBG LED');
gettext('## RGB LED  \n');
gettext('**NOT-3**');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('10-XOR-gate-buttons-LED');
gettext('## Example: Manual testing of the XOR gate\n');
gettext('10-XOR-gate-buttons-LED');
gettext('10-XOR-gate-buttons-LED');
gettext('10-XOR-gate-buttons-LED');
gettext('10-XOR-gate-buttons-LED');
gettext('**XOR Gate**');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('11-XOR-op-button-LEDs');
gettext('**XOR-Op4**');
gettext('## Example: Manual testing of the XOR-Op4 gate\n\nThe XOR-Op4 gate perform the XOR operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('`a XOR b`');
gettext('11-XOR-op-button-LEDs');
gettext('11-XOR-op-button-LEDs');
gettext('11-XOR-op-button-LEDs');
gettext('11-XOR-op-button-LEDs');
gettext('**XOR-Op3**');
gettext('## Example: Manual testing of the XOR-Op3 gate\n\nThe XOR-Op3 gate performs the XOR operation between operands a and b.  \nWhen the switch is ON the operand b has a value (`111` by default)  \notherwise operand b is 0\nThe result of the XOR operation is shown on the RGB LED');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('12-XNOR-gate-buttons-LED');
gettext('## Example: Manual testing of the XNOR gate\n');
gettext('12-XNOR-gate-buttons-LED');
gettext('12-XNOR-gate-buttons-LED');
gettext('12-XNOR-gate-buttons-LED');
gettext('12-XNOR-gate-buttons-LED');
gettext('**XNOR Gate**');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('13-XOR-op-button-LEDs');
gettext('**XNOR-Op4**');
gettext('## Example: Manual testing of the XNOR-Op4 gate\n\nThe XNOR-Op4 gate perform the XNOR operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('`a XNOR b`');
gettext('13-XOR-op-button-LEDs');
gettext('13-XOR-op-button-LEDs');
gettext('13-XOR-op-button-LEDs');
gettext('13-XOR-op-button-LEDs');
gettext('**XNOR-Op3**');
gettext('## Example: Manual testing of the XNOR-Op3 gate\n\nThe XNOR-Op3 gate performs the XNOR operation between operands a and b.  \nWhen the switch is ON the operand b has a value (`111` by default)  \notherwise operand b is 0\nThe result of the XNOR operation is shown on the RGB LED');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('14-NAND-gate-buttons-LED');
gettext('## Example: Manual testing of the NAND gate\n');
gettext('14-NAND-gate-buttons-LED');
gettext('14-NAND-gate-buttons-LED');
gettext('14-NAND-gate-buttons-LED');
gettext('14-NAND-gate-buttons-LED');
gettext('**NAND Gate**');
gettext('## Example: Manual testing of the NAND2 gate\n');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('15-NOR-gate-buttons-LED');
gettext('**NOR Gate**');
gettext('## Example: Manual testing of the NOR gate\n');
gettext('15-NOR-gate-buttons-LED');
gettext('15-NOR-gate-buttons-LED');
gettext('15-NOR-gate-buttons-LED');
gettext('15-NOR-gate-buttons-LED');
gettext('And');
gettext('Nand');
gettext('Nor');
gettext('Not');
gettext('Or');
gettext('Xnor');
gettext('Xor');
gettext('And-Bus');
gettext('And-Busen');
gettext('And-Op');
gettext('And2');
gettext('And3');
gettext('And4');
gettext('And5');
gettext('And6');
gettext('And7');
gettext('And8');
gettext('And-Bus2');
gettext('And-Bus3');
gettext('And-Bus4');
gettext('And-Bus5');
gettext('And-Bus6');
gettext('And-Bus7');
gettext('And-Bus8');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND-Bus2 gate: Manual testing with two pushbutton and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Constant bit 1');
gettext('# AND-Bus3 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND-Bus4 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus5-Join-2-3: Join the two buses of 2 and 3 bits into a 5-bits Bus');
gettext('# AND-Bus5 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus6-Join-2-4: Join all the two buses into a 6-bits Bus');
gettext('# AND-Bus6 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus7-Join-2-5: Join the two buses into a 7-bits Bus');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('# AND-Bus7 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus8-Join-2-6: Join the two buses into an 8-bits Bus');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('# AND-Bus8 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('And-Busen-02');
gettext('And-Busen-03');
gettext('And-Busen-04');
gettext('And-Busen-05');
gettext('And-Busen-06');
gettext('And-Busen-07');
gettext('And-Busen-08');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('# AND-Busen2 gate: Manual testing with one pushbutton and two LEDs\n\nWhen the button is pressed, the two LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('3bits constant value: 7');
gettext('# AND-Busen3 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('# AND-Busen4 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('# AND-Busen5 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('# AND-Busen6 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('Generic: 7-bits generic constant (0-127)');
gettext('# AND-Busen7 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('# AND-Busen8 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('And-Op-16');
gettext('And-Op-2');
gettext('And-Op-3');
gettext('And-Op-4');
gettext('And-Op-5');
gettext('And-Op-6');
gettext('And-Op-7');
gettext('And-Op-8');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('D Flip-flop (verilog implementation)');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('16-bits Syscounter with reset');
gettext('DFF-rst-x16: 16 D flip-flops in paralell with reset');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('Bus16-Split-quarter: Split the 16-bits bus into four buses of the same size');
gettext('Bus16-Join-quarter: Join the four same buses into an 16-bits Bus');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Generic: 16-bits generic constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('Constant bit 0');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('1-bit generic constant (0/1)');
gettext('2-to-1 Multplexer (16-bit channels)');
gettext('2-to-1 Multplexer (8-bit channels)');
gettext('2-to-1 Multplexer (4-bit channels)');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('Display16-8: Display a 16-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('System TFF with toggle input: It toogles on every system cycle if the input is active');
gettext('Reg: 1-Bit register');
gettext('2-to-1 Multplexer (1-bit channels). Fippled version');
gettext('# AND-Op16: Manual testing with pushbuttons and LEDs\n\nThe AND operation is applied to the 16-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('System clock');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('Data input');
gettext('Initial default  \nvalue: 0');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Channel B');
gettext('Channel A');
gettext('Byte 0  \n(least significant)  ');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op2: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('01-manual-test-btns-leds');
gettext('Bus3-Join-1-2: Join two buses of 2 and 1 bits into a 3-bits Bus');
gettext('# AND-Op3: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 3-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op4: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 4-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op5: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 5-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op6: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 6-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('Bus7-Join-5-2: Join the two buses into a 7-bits Bus');
gettext('# AND-Op7: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 7-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('Bus8-Join-6-2: Join the two buses into an 8-bits Bus');
gettext('# AND-Op8: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 8-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND gate: Manual testing with two pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('## And Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   0    |\n| 1   |  0  |   0    |\n| 1   |  1  |   1    |');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND gate: Manual testing with three pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND5 gate: Manual testing with pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND6 gate: Manual testing with pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND7 gate: Manual testing with pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND8 gate: Manual testing with pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Nand2');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# NAND gate: Manual testing with two pushbuttons and one LED\n\nOnly when the two buttons are pressed at the same time, the LED0 is turned off');
gettext('## NAND Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   1    |\n| 0   |  1  |   1    |\n| 1   |  0  |   1    |\n| 1   |  1  |   0    |');
gettext('Nor2');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# NOR gate: Manual testing with two pushbuttons and one LED\n\nThe LED is only on when none of the butons is pressed');
gettext('## NOR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   1    |\n| 0   |  1  |   0    |\n| 1   |  0  |   0    |\n| 1   |  1  |   0    |');
gettext('01-bit');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('16-bits');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('# Not gate: Manual testing with a pushbutton and an LED\n\nWhen the button SW1 is not pressed, the input is 0. The output of the  \nnot is 1 and the LED is on  \nWhen the button SW1 is pressed, the input is 1, the output 0 and the  \nLED is off');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('# Not-x2 gate: Manual testing with pushbuttons and LEDs\n\nThe two buttons are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('# Not-x3 gate: Manual testing with pushbuttons and LEDs\n\nThe three inputs are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('2bits constant value: 0');
gettext('# Not-x4 gate: Manual testing with pushbuttons and LEDs\n\nThe four inputs are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('3bits constant value: 0');
gettext('# Not-x5 gate: Manual testing with pushbuttons and LEDs\n\nThe 5 inputs are inverted (negative logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('4bits constant value: 0');
gettext('# Not-x6 gate: Manual testing with pushbuttons and LEDs\n\nThe 6 inputs are inverted (negative logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('5bits constant value: 0');
gettext('# Not-x7 gate: Manual testing with pushbuttons and LEDs\n\nThe 6 inputs are inverted (negative logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('6bits constant value: 0');
gettext('# Not-x8 gate: Manual testing with pushbuttons and LEDs\n\nThe four inputs are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('Bus16-Join-1-15: Join the two buses into a 16-bits Bus');
gettext('15bits constant value: 0');
gettext('Generic: 15-bits generic constant');
gettext('# Not-x16 gate: Manual testing with pushbuttons and LEDs\n\nAll the inputs are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Or-Bus');
gettext('Or-op');
gettext('Or2');
gettext('Or3');
gettext('Or4');
gettext('Or5');
gettext('Or6');
gettext('Or7');
gettext('Or8');
gettext('Or-Bus2');
gettext('Or-Bus3');
gettext('Or-Bus4');
gettext('Or-Bus5');
gettext('Or-Bus6');
gettext('Or-Bus7');
gettext('Or-Bus8');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus2 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus3 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus4 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus5 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus6-Join-all: Join all the wires into a 6-bits Bus');
gettext('# OR-Bus6 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus7-Join-all: Join all the wires into a 7-bits Bus');
gettext('# OR-Bus7 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus8-Join-all: Join all the wires into a 8-bits Bus');
gettext('# OR-Bus8 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Or-op-16');
gettext('Or-op-2');
gettext('Or-op-3');
gettext('Or-op-4');
gettext('Or-op-5');
gettext('Or-op-6');
gettext('Or-op-8');
gettext('or-op-7');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# OR-Op16: Manual testing with two pushbuttons and two LEDs\n\nThe OR operation is applied to the 8-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# OR-Op2: Manual testing with two pushbuttons and two LEDs\n\nThe OR operation is applied to the 2-bits coming form the pushbuttons and a constant  \nnumber (0-3). The result is shown on LEDs 0 and 1\n\nThe number 0 is used by default');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# OR-Op3: Manual testing with two pushbuttons and two LEDs\n\nThe OR operation is applied to the 3-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# OR-Op4: Manual testing with two pushbuttons and two LEDs\n\nThe OR operation is applied to the 4-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# OR-Op5: Manual testing with two pushbuttons and two LEDs\n\nThe OR operation is applied to the 5-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# OR-Op6: Manual testing with two pushbuttons and LEDs\n\nThe OR operation is applied to the 6-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# OR-Op8: Manual testing with two pushbuttons and two LEDs\n\nThe OR operation is applied to the 8-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# OR-Op7: Manual testing with two pushbuttons and LEDs\n\nThe OR operation is applied to the 7-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('## OR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   1    |\n| 1   |  0  |   1    |\n| 1   |  1  |   1    |');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR4 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR5 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR6 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR7 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR8 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Xnor-op');
gettext('Xnor2');
gettext('Xnor-op2');
gettext('Xnor-op3');
gettext('Xnor-op4');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# XNOR-Op2: Manual testing with two pushbuttons and two LEDs\n\nThe XNOR operation is applied to the 2-bits coming form the pushbuttons and a constant  \nnumber (0-3). The result is shown on LEDs 0 and 1\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# XNOR-Op3: Manual testing with two pushbuttons and two LEDs\n\nThe XNOR operation is applied to the 3-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# XNOR-Op4: Manual testing with two pushbuttons and two LEDs\n\nThe XNOR operation is applied to the 4-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('XNor-x02-verilog: 2-bits input XNOR gate. Verilog implementation');
gettext('# XNOR gate: Manual testing with two pushbuttons and one LED\n');
gettext('## XNOR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   1    |\n| 0   |  1  |   0    |\n| 1   |  0  |   0    |\n| 1   |  1  |   1    |');
gettext('Xor-op');
gettext('Xor2');
gettext('Xor-op2');
gettext('Xor-op3');
gettext('Xor-op4');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# XOR-Op2: Manual testing with two pushbuttons and two LEDs\n\nThe XOR operation is applied to the 2-bits coming form the pushbuttons and a constant  \nnumber (0-3). The result is shown on LEDs 0 and 1\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# XOR-Op3: Manual testing with two pushbuttons and two LEDs\n\nThe XOR operation is applied to the 3-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# XOR-Op4: Manual testing with two pushbuttons and two LEDs\n\nThe XOR operation is applied to the 4-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# XOR gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on only if button 1 is pressed or button 2 is pressed but not  \nboth at the same time');
gettext('## XOR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   1    |\n| 1   |  0  |   1    |\n| 1   |  1  |   0    |');
