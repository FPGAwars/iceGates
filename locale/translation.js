// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('And');
gettext('Nand');
gettext('Nor');
gettext('Not');
gettext('Or');
gettext('Xnor');
gettext('Xor');
gettext('And-Bus');
gettext('And-Busen');
gettext('And-Op');
gettext('Blocks');
gettext('And2');
gettext('Two bits input And gate');
gettext('And3');
gettext('AND3-verilog. 3- bits input And gate. Verilog implementation');
gettext('And4');
gettext('AND4-verilog. 4-bits input And gate. Verilog implementation');
gettext('And5');
gettext('AND5-verilog. 5-bits input And gate. Verilog implementation');
gettext('And6');
gettext('AND6-verilog. 6-bits input And gate. Verilog implementation');
gettext('And7');
gettext('AND7-verilog. 7-bits input And gate. Verilog implementation');
gettext('And8');
gettext('AND8-verilog. 8-bits input And gate. Verilog implementation');
gettext('Blocks');
gettext('And-Bus2');
gettext('AND-BUS2-verilog. And gate with 2-bits bus input. Verilog implementation');
gettext('And-Bus3');
gettext('AND-BUS3-verilog. And gate with 3-bits bus input. Verilog implementation');
gettext('And-Bus4');
gettext('AND-BUS4-verilog. And gate with 4-bits bus input. Verilog implementation');
gettext('And-Bus5');
gettext('AND-BUS5-verilog. And gate with 5-bits bus input. Verilog implementation');
gettext('And-Bus6');
gettext('AND-BUS6-verilog. And gate with 6-bits bus input. Verilog implementation');
gettext('And-Bus7');
gettext('AND-BUS7-verilog. And gate with 7-bits bus input. Verilog implementation');
gettext('And-Bus8');
gettext('AND-BUS8-verilog. And gate with 8-bits bus input. Verilog implementation');
gettext('And-Bus2');
gettext('AND-BUS2. And gate with 2-bits bus input');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('And-Bus3');
gettext('AND-BUS3. And gate with 3-bits bus input');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('And-Bus4');
gettext('AND-BUS4. And gate with 4-bits bus input');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('And-Bus5');
gettext('AND-BUS5. And gate with 5-bits bus input');
gettext('Bus5-Split-3-2: Split the 5-bits bus into two buses of 3 and 2 bits');
gettext('And-Bus6');
gettext('AND-BUS6. And gate with 6-bits bus input');
gettext('Bus6-Split-2-4: Split the 6-bits bus into two buses of 2 and 4 wires');
gettext('And-Bus7');
gettext('AND-BUS7. And gate with 7-bits bus input');
gettext('Bus7-Split-3-4: Split the 7-bits bus into two buses of 3 and 4 wires');
gettext('And-Bus8');
gettext('AND-BUS8. And gate with 8-bits bus input');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Blocks');
gettext('And-Busen2');
gettext('AND-Busen-2-verilog: Enable a 2-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('Enable input');
gettext('Bus input');
gettext('Bus output');
gettext('And-Busen3');
gettext('AND-Busen-3-verilog: Enable a 3-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen4');
gettext('AND-Busen-4-verilog: Enable a 4-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen5');
gettext('AND-Busen-5-verilog: Enable a 5-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen6');
gettext('AND-Busen-6-verilog: Enable a 6-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen7');
gettext('AND-Busen-7-verilog: Enable a 7-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('And-Busen8');
gettext('AND-Busen-8: Enable a 8-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('And-Busen2');
gettext('AND-Busen-2: Enable a 2-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('And-Busen3');
gettext('AND-Busen-3: Enable a 3-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('And-Busen4');
gettext('AND-Busen-4: Enable a 4-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('And-Busen5');
gettext('AND-Busen-5: Enable a 5-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus5-Split-all: Split the 5-bits bus into its wires');
gettext('Bus5-Join-all: Join all the wires into a 5-bits Bus');
gettext('And-Busen6');
gettext('AND-Busen-6: Enable a 6-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus6-Split-half: Split the 6-bits bus into two buses of 3 wires');
gettext('Bus6-Join-half: Join the two buses into a 6-bits Bus');
gettext('And-Busen7');
gettext('AND-Busen-7: Enable a 7-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus7-Split-4-3: Split the 7-bits bus into two buses of 4 and 3 wires');
gettext('Bus7-Join-4-3: Join the two buses into a 7-bits Bus');
gettext('And-Busen8');
gettext('Blocks');
gettext('And-Op-16');
gettext('AND-Op16-verilog: And operation between two numbers of 16 bits. Verilog implementation');
gettext('Operand 1');
gettext('Operand 2');
gettext('And-Op-2');
gettext('AND-Op2-verilog: And operation between two numbers of 2 bits. Verilog implementation');
gettext('And-Op-3');
gettext('AND-Op3-verilog: And operation between two numbers of 3 bits. Verilog implementation');
gettext('And-Op-32');
gettext('AND-Op32-verilog: And operation between two numbers of 32 bits. Verilog implementation');
gettext('And-Op-4');
gettext('AND-Op4-verilog: And operation between two numbers of 4 bits. Verilog implementation');
gettext('And-Op-5');
gettext('AND-Op5-verilog: And operation between two numbers of 5 bits. Verilog implementation');
gettext('And-Op-6');
gettext('AND-Op6-verilog: And operation between two numbers of 6 bits. Verilog implementation');
gettext('And-Op-7');
gettext('AND-Op7-verilog: And operation between two numbers of 7 bits. Verilog implementation');
gettext('And-Op-8');
gettext('AND-Op8-verilog: And operation between two numbers of 8 bits. Verilog implementation');
gettext('And-Op-16');
gettext('AND-Op16: And operation between two numbers of 16 bits');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('And-Op-2');
gettext('AND-Op2: And operation between two numbers of 2 bits');
gettext('And-Op-3');
gettext('AND-Op3: And operation between two numbers of 3 bits');
gettext('Bus3-Split-2-1: Split the 3-bits bus into two: 2-bit and 1-bits buses');
gettext('Bus3-Join-2-1: Joint two buses of 1 and 2 bits into a 3-bits Bus');
gettext('And-Op-4');
gettext('AND-Op4: And operation between two numbers of 4 bits');
gettext('Bus4-Split-half: Split the 4-bits bus into two of the same size');
gettext('Bus4-Join-half: Join the two buses into a 4-bits Bus');
gettext('And-Op-5');
gettext('AND-Op5: And operation between two numbers of 5 bits');
gettext('Bus5-Join-3-2: Join the two buses of 3 and 2 bits into a 5-bits Bus');
gettext('And-Op-6');
gettext('AND-Op6: And operation between two numbers of 6 bits');
gettext('And-Op-7');
gettext('AND-Op7: And operation between two numbers of 7 bits');
gettext('And-Op-8');
gettext('AND-Op8: And operation between two numbers of 8 bits');
gettext('And3');
gettext('Three bits input And gate');
gettext('And4');
gettext('And5');
gettext('And5: five bits input And gate');
gettext('And6');
gettext('And6: six bits input And gate');
gettext('And7');
gettext('And7: seven bits input And gate');
gettext('And8');
gettext('And8: 8-bits input And gate');
gettext('Blocks');
gettext('Nand2');
gettext('Nand-x02: two input NAND gate. Verilog implementation');
gettext('Nand');
gettext('Nand-x02: two input NAND gate');
gettext('NOT gate (Verilog implementation)');
gettext('Input');
gettext('Output');
gettext('Blocks');
gettext('Nor-Bus');
gettext('Nor');
gettext('Nor-x02-verilog: 2 input NOR gate. Verilog implementation');
gettext('Nor');
gettext('Nor-x02: two input NOR gate');
gettext('OR2: Two bits input OR gate');
gettext('Nor-bus4');
gettext('Nor-bus-x04-verilog: 4-bits input NOR gate. Verilog implementation');
gettext('Blocks');
gettext('Not-x02');
gettext('not-x2-verilog: 2-bits not gate. Verilog implementation');
gettext('Not-x03');
gettext('not-x3-verilog: 3-bits not gate. Verilog implementation');
gettext('Not-x04');
gettext('not-x4-verilog: 4-bits not gate. Verilog implementation');
gettext('Not-x05');
gettext('not-x5-verilog: 5-bits not gate. Verilog implementation');
gettext('Not-x06');
gettext('not-x6-verilog: 6-bits not gate. Verilog implementation');
gettext('Not-x07');
gettext('not-x7-verilog: 7-bits not gate. Verilog implementation');
gettext('Not-x08');
gettext('not-x8-verilog: 8-bits not gate. Verilog implementation');
gettext('Not-x11');
gettext('not-x11-verilog: 11-bits not gate. Verilog implementation');
gettext('Not-x12');
gettext('not-x12-verilog: 12-bits not gate. Verilog implementation');
gettext('Not-x16');
gettext('not-x16-verilog: 16-bits not gate. Verilog implementation');
gettext('Not-x32');
gettext('not-x32: 32-bits not gate');
gettext('Not');
gettext('Not-x02');
gettext('not-x2: 2-bits not gate');
gettext('Not-x03');
gettext('not-x3: 3-bits not gate');
gettext('Not-x04');
gettext('not-x4: 4-bits not gate');
gettext('Not-x05');
gettext('not-x5: 5-bits not gate');
gettext('Bus5-Join-4-1: Join the two buses of 4 and 1 bits into a 5-bits Bus');
gettext('Bus5-Split-4-1: Split the 5-bits bus into two buses of 4 and 1 bits');
gettext('Not-x06');
gettext('not-x6: 6-bits not gate');
gettext('Bus6-Join-4-2: Join the two buses into a 6-bits Bus');
gettext('Bus6-Split-4-2: Split the 6-bits bus into two buses of 4 and 2 wires');
gettext('Not-x07');
gettext('not-x7: 7-bits not gate');
gettext('Not-x08');
gettext('not-x8: 8-bits not gate');
gettext('Not-x16');
gettext('not-x16: 16-bits not gate');
gettext('Blocks');
gettext('Or-Bus');
gettext('Or-Op');
gettext('Or2');
gettext('Or3');
gettext('OR3-verilog: 3-bits input OR gate. Verilog implementation');
gettext('Or4');
gettext('OR4-verilog: 4-bits input OR gate. Verilog implementation');
gettext('Or5');
gettext('OR5-verilog: 5-bits input OR gate. Verilog implementation');
gettext('Or6');
gettext('OR6-verilog: 6-bits input OR gate. Verilog implementation');
gettext('Or7');
gettext('OR7-verilog: 7-bits input OR gate. Verilog implementation');
gettext('Or8');
gettext('OR8-verilog: 8-bits input OR gate. Verilog implementation');
gettext('Or3');
gettext('OR3: Three bits input OR gate');
gettext('Or4');
gettext('OR4: Four bits input OR gate');
gettext('Or5');
gettext('OR5: 5 bits input OR gate');
gettext('Or6');
gettext('OR6: 6 bits input OR gate');
gettext('Or7');
gettext('Or7: Seven bits input OR gate');
gettext('Or8');
gettext('OR8: Eight bits input OR gate');
gettext('Blocks');
gettext('Or-bus16');
gettext('OR-BUS16-verilog: OR gate with 16-bits bus input. Verilog implementation');
gettext('Or-bus2');
gettext('OR-BUS2-verilog: OR gate with 2-bits bus input. Verilog implementation');
gettext('Or-bus3');
gettext('OR-BUS3-verilog: OR gate with 3-bits bus input. Verilog implementation');
gettext('Or-bus4');
gettext('OR-BUS4-verilog: OR gate with 4-bits bus input. Verilog implementation');
gettext('Or-bus5');
gettext('OR-BUS5-verilog: OR gate with 5-bits bus input. Verilog implementation');
gettext('Or-bus6');
gettext('OR-BUS6-verilog: OR gate with 6-bits bus input. Verilog implementation');
gettext('Or-bus7');
gettext('OR-BUS7-verilog: OR gate with 7-bits bus input. Verilog implementation');
gettext('Or-bus8');
gettext('OR-BUS8-verilog: OR gate with 8-bits bus input. Verilog implementation');
gettext('Or-bus2');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('Or-bus3');
gettext('OR-BUS3: OR gate with 3-bits bus input');
gettext('Or-bus4');
gettext('OR-BUS4: OR gate with 4-bits bus input');
gettext('Or-bus5');
gettext('OR-BUS5: OR gate with 5-bits bus input');
gettext('Or-bus6');
gettext('OR-BUS6: OR gate with 6-bits bus input');
gettext('Or-bus7');
gettext('OR-BUS7: OR gate with 7-bits bus input');
gettext('Bus7-Split-all: Split the 7-bits bus into its wires');
gettext('Or-bus8');
gettext('OR-BUS8: OR gate with 8-bits bus input');
gettext('Bus8-Split-all: Split the 8-bits bus into its wires');
gettext('Blocks');
gettext('Or-Op-16');
gettext('OR-Op16-verilog: Or operation between two numbers of 16 bits. Verilog implementation');
gettext('Or-Op-2');
gettext('OR-Op2-verilog: Or operation between two numbers of 2 bits. Verilog implementation');
gettext('Or-Op-3');
gettext('OR-Op3-verilog: Or operation between two numbers of 3 bits. Verilog implementation');
gettext('Or-Op-32');
gettext('OR-Op32-verilog: Or operation between two numbers of 32 bits. Verilog implementation');
gettext('Or-Op-4');
gettext('OR-Op4-verilog: Or operation between two numbers of 4 bits. Verilog implementation');
gettext('Or-Op-5');
gettext('OR-Op5-verilog: Or operation between two numbers of 5 bits. Verilog implementation');
gettext('Or-Op-6');
gettext('OR-Op6-verilog: Or operation between two numbers of 6 bits. Verilog implementation');
gettext('Or-Op-7');
gettext('OR-Op7-verilog: Or operation between two numbers of 7 bits. Verilog implementation');
gettext('Or-Op-8');
gettext('OR-Op8-verilog: Or operation between two numbers of 8 bits. Verilog implementation');
gettext('Or-Op-16');
gettext('OR-Op16: Or operation between two numbers of 16 bits');
gettext('Or-Op-2');
gettext('OR-Op2: Or operation between two numbers of 2 bits');
gettext('Or-Op-3');
gettext('OR-Op3: Or operation between two numbers of 3 bits');
gettext('Or-Op-4');
gettext('Or-Op4: Or operation between two numbers of 4 bits');
gettext('Or-Op-5');
gettext('OR-Op5: And operation between two numbers of 5 bits');
gettext('Or-Op-6');
gettext('OR-Op6: Or operation between two numbers of 6 bits');
gettext('Or-Op-7');
gettext('OR-Op7: OR operation between two numbers of 7 bits');
gettext('Or-Op-8');
gettext('OR-Op8: Or operation between two numbers of 8 bits');
gettext('Blocks');
gettext('Xnor-OP');
gettext('Xnor2');
gettext('XNor-x02-verilog: 2-bits input XNOR gate. Verilog implementation');
gettext('Xnor2');
gettext('XNor-x02: two input XNOR gate');
gettext('XOR gate: 2-bits input xor gate. Verilog implementation');
gettext('Blocks');
gettext('Xnor-op2');
gettext('XNOR gate-verilog: 2 bits input xnor gate. Verilog implementation');
gettext('Xnor-op3');
gettext('XNOR gate-verilog: 3 bits input xnor gate. Verilog implementation');
gettext('Xnor-op4');
gettext('XNOR gate-verilog: 4 bits input xnor gate. Verilog implementation');
gettext('Xnor-op2');
gettext('XNOR gate: two bits input xnor gate');
gettext('Xnor-op3');
gettext('XNOR-Op3: Xnor operation between two numbers of 3 bits');
gettext('Xnor-op4');
gettext('XNOR-Op4: Xnor operation between two numbers of 4 bits');
gettext('Blocks');
gettext('Xor-OP');
gettext('Xor2');
gettext('Xor2');
gettext('XOR gate: two bits input xor gate');
gettext('Blocks');
gettext('Xor-op2');
gettext('Xor-op3');
gettext('XOR gate: 3-bits input xor gate. Verilog implementation');
gettext('Xor-op4');
gettext('XOR gate: 4-bits input xor gate. Verilog implementation');
gettext('Xor-op8');
gettext('XOR gate: 8-bits input xor gate. Verilog implementation');
gettext('Xor-op2');
gettext('Xor-op3');
gettext('XOR-Op3: Xor operation between two numbers of 3 bits');
gettext('Xor-op4');
gettext('XOR-Op4: Xor operation between two numbers of 4 bits');
gettext('01-AND-gate');
gettext('02-AND-gate-BUS');
gettext('03-AND-enable');
gettext('04-AND-op');
gettext('05-OR-gate');
gettext('06-OR-gate-BUS');
gettext('07-OR-op');
gettext('08-NOT-gate');
gettext('09-NOT-op');
gettext('10-XOR-gate');
gettext('11-XOR-op');
gettext('12-XNOR-gate');
gettext('13-XNOR-op');
gettext('14-NAND-gate');
gettext('15-NOR-gate');
gettext('00-Index');
gettext('AND-Busen-8-verilog: Enable a 8-bits bus. When the enable signal is 0, the output is 0. Verilog implementation');
gettext('# INDEX: IceGate Collection');
gettext('## AND');
gettext('## Not ');
gettext('And-Op2');
gettext('## OR ');
gettext('## XOR');
gettext('### 2-bits');
gettext('### 3-bits');
gettext('### 4-bits');
gettext('### 8-bits');
gettext('## NAND');
gettext('## NOR');
gettext('## XNOR');
gettext('### 5-bits');
gettext('### 6-bits');
gettext('### 7-bits');
gettext('Or-Bus2');
gettext('Or-Op2');
gettext('001-Index');
gettext('### 16-bits');
gettext('Alhambra-II');
gettext('NandLand-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('01-And-gate-buttons-LED');
gettext('## INPUTS');
gettext('**AND Gate**');
gettext('## Example: Manual testing of the AND2 gate\n\nThe LED is only ON when the two buttons SW1 and SW2 are pressed');
gettext('## OUTPUT');
gettext('01-And-gate-buttons-LED');
gettext('01-And-gate-buttons-LED');
gettext('01-And-gate-buttons-LED');
gettext('01-And-gate-buttons-LED');
gettext('2bits constant value: 3');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('## Example: Manual testing of the AND2 gate\n\nThe RGB LED is turned GREEN only when the two buttons SW1 and SW2 are ON');
gettext('## RGB LED');
gettext('Red and blue disabled');
gettext('Negative logic');
gettext('Green component');
gettext('Switches are in  \nnegative logic');
gettext('Positive logic here');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('02-And-gate-BUS-buttons-LED');
gettext('**AND-BUS2 Gate**');
gettext('## Example: Manual testing of the AND-BUS2 gate\n\nThe LED is only ON when the two buttons SW1 and SW2 are pressed');
gettext('02-And-gate-BUS-buttons-LED');
gettext('02-And-gate-BUS-buttons-LED');
gettext('02-And-gate-BUS-buttons-LED');
gettext('02-And-gate-BUS-buttons-LED');
gettext('## Example: Manual testing of the AND-BUS2 gate\n\nThe RGB LED is turned GREEN only when the two buttons SW1 and SW2 are ON');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('03-And-enable-buttons-LED');
gettext('4bits constant value: 15 (0xF in hexadecimal)');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('**AND-Busen4**');
gettext('## Example: Manual testing of the AND-Busen4 gate\n\nThe given number by the 4-bits constant (0xF by default) is displayed on the  \nLEDs when the button is pressed');
gettext('Enable button');
gettext('03-And-enable-buttons-LED');
gettext('03-And-enable-buttons-LED');
gettext('03-And-enable-buttons-LED');
gettext('03-And-enable-buttons-LED');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('**AND-Busen3**');
gettext('## Example: Manual testing of the AND-Busen4 gate\n\nThe given number by the 3-bits constant is used to activate the RGB LED  \nChanging this value will change the color displayed on the LED  \nIt only works if the switch s1 is ON  ');
gettext('Enable button  \n(Negative logic)');
gettext('## RGB LED  \n\nNegative logic');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('04-And-op-button-LEDs');
gettext('**AND-Op4**');
gettext('## Example: Manual testing of the AND-Op4 gate\n\nThe AND-Op4 gate perform the AND operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('Operand b or 0');
gettext('Enable the operand b');
gettext('`a AND b`');
gettext('04-And-op-button-LEDs');
gettext('04-And-op-button-LEDs');
gettext('04-And-op-button-LEDs');
gettext('04-And-op-button-LEDs');
gettext('**AND-Op3**');
gettext('## Example: Manual testing of the AND-Op3 gate\n\nThe AND-Op3 gate perform the AND operation between operands a and b.  \nWhen the switch is ON the operand b has a value (`111` by default)  \notherwise operand b is 0\nThe result of the AND operation is shown on the RGB LED');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('05-Or-gate-buttons-LED');
gettext('**OR Gate**');
gettext('## Example: Manual testing of the OR2 gate\n\nThe LED is turned on when any button (or both) are pressed');
gettext('05-Or-gate-buttons-LED');
gettext('05-Or-gate-buttons-LED');
gettext('05-Or-gate-buttons-LED');
gettext('05-Or-gate-buttons-LED');
gettext('## Example: Manual testing of the OR2 gate\n\nThe RGB LED is turned GREEN if either switches s1 or s2 (or both) are ON');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('**OR-BUS2 Gate**');
gettext('## Example: Manual testing of the OR-BUS2 gate\n\nThe LED is ON when any of the buttons (or both) are pressed');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('06-Or-gate-BUS-buttons-LED');
gettext('## Example: Manual testing of the OR-BUS2 gate\n\nThe RGB LED is turned GREEN when any of the switches (or both) are ON');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('07-Or-op-button-LEDs');
gettext('**OR-Op4**');
gettext('## Example: Manual testing of the OR-Op4 gate\n\nThe OR-Op4 gate perform the OR operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('`a OR b`');
gettext('07-Or-op-button-LEDs');
gettext('07-Or-op-button-LEDs');
gettext('07-Or-op-button-LEDs');
gettext('07-Or-op-button-LEDs');
gettext('## Example: Manual testing of the OR-Op3 gate\n\nThe OR-Op3 gate perform the OR operation between operands a and b.  \nWhen the switch is ON the operand b has a value (`001` by default)  \notherwise operand b is 0\nThe result of the OR operation is shown on the RGB LED');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('08-NOT-button-LED');
gettext('**NOT gate**');
gettext('## Example: Manual testing of the NOT gate\n\nThe NOT gate performs the NOT operation on the input comming from  \nthe button. The output is shown on the LEDs  \n');
gettext('## INPUT');
gettext('08-NOT-button-LED');
gettext('08-NOT-button-LED');
gettext('08-NOT-button-LED');
gettext('08-NOT-button-LED');
gettext('## Example: Manual testing of the NOT gate\n\nThe NOT gate performs the NOT operation on the input comming from  \nthe switch. The output turn GREEN the RGB LED  \n');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('09-NOT-op-LEDs');
gettext('## Example: Manual testing of the NOT-4 gate\n\nA 4-bit number is entered as the input of the NOT-4 gate and its output is  \nshown on the LED. If the buton is not pressed, the number is 0, so that all  \nthe LEDs are ON. When the button is pressed the number used in the NOT  \noperation is `0101`. The result is the number `1010` that can be seen on the  \nLED');
gettext('Operand a');
gettext('`NOT a`');
gettext('09-NOT-op-LEDs');
gettext('09-NOT-op-LEDs');
gettext('09-NOT-op-LEDs');
gettext('09-NOT-op-LEDs');
gettext('## Example: Manual testing of the NOT-3 gate\n\nThe 3-bit number introduced in the Swtiches is inverted using the  \nNOT-3 gate. The result is displayed on the RBG LED');
gettext('## RGB LED  \n');
gettext('**NOT-3**');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('10-XOR-gate-buttons-LED');
gettext('## Example: Manual testing of the XOR gate\n');
gettext('10-XOR-gate-buttons-LED');
gettext('10-XOR-gate-buttons-LED');
gettext('10-XOR-gate-buttons-LED');
gettext('10-XOR-gate-buttons-LED');
gettext('**XOR Gate**');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('11-XOR-op-button-LEDs');
gettext('**XOR-Op4**');
gettext('## Example: Manual testing of the XOR-Op4 gate\n\nThe XOR-Op4 gate perform the XOR operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('`a XOR b`');
gettext('11-XOR-op-button-LEDs');
gettext('11-XOR-op-button-LEDs');
gettext('11-XOR-op-button-LEDs');
gettext('11-XOR-op-button-LEDs');
gettext('**XOR-Op3**');
gettext('## Example: Manual testing of the XOR-Op3 gate\n\nThe XOR-Op3 gate performs the XOR operation between operands a and b.  \nWhen the switch is ON the operand b has a value (`111` by default)  \notherwise operand b is 0\nThe result of the XOR operation is shown on the RGB LED');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('12-XNOR-gate-buttons-LED');
gettext('## Example: Manual testing of the XNOR gate\n');
gettext('12-XNOR-gate-buttons-LED');
gettext('12-XNOR-gate-buttons-LED');
gettext('12-XNOR-gate-buttons-LED');
gettext('12-XNOR-gate-buttons-LED');
gettext('**XNOR Gate**');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('13-XOR-op-button-LEDs');
gettext('**XNOR-Op4**');
gettext('## Example: Manual testing of the XNOR-Op4 gate\n\nThe XNOR-Op4 gate perform the XNOR operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('`a XNOR b`');
gettext('13-XOR-op-button-LEDs');
gettext('13-XOR-op-button-LEDs');
gettext('13-XOR-op-button-LEDs');
gettext('13-XOR-op-button-LEDs');
gettext('**XNOR-Op3**');
gettext('## Example: Manual testing of the XNOR-Op3 gate\n\nThe XNOR-Op3 gate performs the XNOR operation between operands a and b.  \nWhen the switch is ON the operand b has a value (`111` by default)  \notherwise operand b is 0\nThe result of the XNOR operation is shown on the RGB LED');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('14-NAND-gate-buttons-LED');
gettext('## Example: Manual testing of the NAND gate\n');
gettext('14-NAND-gate-buttons-LED');
gettext('14-NAND-gate-buttons-LED');
gettext('14-NAND-gate-buttons-LED');
gettext('14-NAND-gate-buttons-LED');
gettext('**NAND Gate**');
gettext('## Example: Manual testing of the NAND2 gate\n');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('15-NOR-gate-buttons-LED');
gettext('**NOR Gate**');
gettext('## Example: Manual testing of the NOR gate\n');
gettext('15-NOR-gate-buttons-LED');
gettext('15-NOR-gate-buttons-LED');
gettext('15-NOR-gate-buttons-LED');
gettext('15-NOR-gate-buttons-LED');
