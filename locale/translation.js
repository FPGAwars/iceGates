// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('And');
gettext('Nand');
gettext('Nor');
gettext('Not');
gettext('Or');
gettext('Xnor');
gettext('Xor');
gettext('And-Bus');
gettext('And-Busen');
gettext('And-Op');
gettext('And2');
gettext('Two bits input And gate');
gettext('And3');
gettext('Three bits input And gate');
gettext('And4');
gettext('And5');
gettext('And5: five bits input And gate');
gettext('And6');
gettext('And6: six bits input And gate');
gettext('And7');
gettext('And7: seven bits input And gate');
gettext('And8');
gettext('And8: 8-bits input And gate');
gettext('And-Bus2');
gettext('AND-BUS2. And gate with 2-bits bus input');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('And-Bus3');
gettext('AND-BUS3. And gate with 3-bits bus input');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('And-Bus4');
gettext('AND-BUS4. And gate with 4-bits bus input');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('And-Bus5');
gettext('AND-BUS5. And gate with 5-bits bus input');
gettext('Bus5-Split-3-2: Split the 5-bits bus into two buses of 3 and 2 bits');
gettext('And-Bus6');
gettext('AND-BUS6. And gate with 6-bits bus input');
gettext('Bus6-Split-2-4: Split the 6-bits bus into two buses of 2 and 4 wires');
gettext('And-Bus7');
gettext('AND-BUS7. And gate with 7-bits bus input');
gettext('Bus7-Split-3-4: Split the 7-bits bus into two buses of 3 and 4 wires');
gettext('And-Bus8');
gettext('AND-BUS8. And gate with 8-bits bus input');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('And-Busen2');
gettext('AND-Busen-2: Enable a 2-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('Enable input');
gettext('Bus input');
gettext('Bus output');
gettext('And-Busen3');
gettext('AND-Busen-3: Enable a 3-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('And-Busen4');
gettext('AND-Busen-4: Enable a 4-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('And-Busen5');
gettext('AND-Busen-5: Enable a 5-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus5-Split-all: Split the 5-bits bus into its wires');
gettext('Bus5-Join-all: Join all the wires into a 5-bits Bus');
gettext('And-Busen6');
gettext('AND-Busen-6: Enable a 6-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus6-Split-half: Split the 6-bits bus into two buses of 3 wires');
gettext('Bus6-Join-half: Join the two buses into a 6-bits Bus');
gettext('And-Busen7');
gettext('AND-Busen-7: Enable a 7-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus7-Split-4-3: Split the 7-bits bus into two buses of 4 and 3 wires');
gettext('Bus7-Join-4-3: Join the two buses into a 7-bits Bus');
gettext('And-Busen8');
gettext('AND-Busen-8: Enable a 8-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('And-Op-2');
gettext('AND-Op2: And operation between two numbers of 2 bits');
gettext('Operand 1');
gettext('Operand 2');
gettext('And-Op-3');
gettext('AND-Op3: And operation between two numbers of 3 bits');
gettext('Bus3-Split-2-1: Split the 3-bits bus into two: 2-bit and 1-bits buses');
gettext('Bus3-Join-2-1: Joint two buses of 1 and 2 bits into a 3-bits Bus');
gettext('And-Op-4');
gettext('AND-Op4: And operation between two numbers of 4 bits');
gettext('Bus4-Split-half: Split the 4-bits bus into two of the same size');
gettext('Bus4-Join-half: Join the two buses into a 4-bits Bus');
gettext('And-Op-5');
gettext('AND-Op5: And operation between two numbers of 5 bits');
gettext('Bus5-Join-3-2: Join the two buses of 3 and 2 bits into a 5-bits Bus');
gettext('And-Op-6');
gettext('AND-Op6: And operation between two numbers of 6 bits');
gettext('And-Op-7');
gettext('AND-Op7: And operation between two numbers of 7 bits');
gettext('And-Op-8');
gettext('AND-Op8: And operation between two numbers of 8 bits');
gettext('Nand');
gettext('Nand-x02: two input NAND gate');
gettext('NOT gate (Verilog implementation)');
gettext('Input');
gettext('Output');
gettext('Nor');
gettext('Nor-x02: two input NOR gate');
gettext('OR2: Two bits input OR gate');
gettext('Not-x02');
gettext('not-x2: 2-bits not gate');
gettext('Not-x03');
gettext('not-x3: 3-bits not gate');
gettext('Not-x04');
gettext('not-x4: 4-bits not gate');
gettext('Not-x05');
gettext('not-x5: 5-bits not gate');
gettext('Bus5-Join-4-1: Join the two buses of 4 and 1 bits into a 5-bits Bus');
gettext('Bus5-Split-4-1: Split the 5-bits bus into two buses of 4 and 1 bits');
gettext('Not-x06');
gettext('not-x6: 6-bits not gate');
gettext('Bus6-Join-4-2: Join the two buses into a 6-bits Bus');
gettext('Bus6-Split-4-2: Split the 6-bits bus into two buses of 4 and 2 wires');
gettext('Not-x07');
gettext('not-x7: 7-bits not gate');
gettext('Not-x08');
gettext('not-x8: 8-bits not gate');
gettext('Not');
gettext('Or-Bus');
gettext('Or2');
gettext('Or3');
gettext('OR3: Three bits input OR gate');
gettext('Or4');
gettext('OR4: Four bits input OR gate');
gettext('Or5');
gettext('OR5: 5 bits input OR gate');
gettext('Or6');
gettext('OR6: 6 bits input OR gate');
gettext('Or7');
gettext('Or7: Seven bits input OR gate');
gettext('Or8');
gettext('OR8: Eight bits input OR gate');
gettext('Or-bus2');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('Or-bus3');
gettext('OR-BUS3: OR gate with 3-bits bus input');
gettext('Or-bus4');
gettext('OR-BUS4: OR gate with 4-bits bus input');
gettext('Or-bus5');
gettext('OR-BUS5: OR gate with 5-bits bus input');
gettext('Or-bus6');
gettext('OR-BUS6: OR gate with 6-bits bus input');
gettext('Or-bus7');
gettext('OR-BUS7: OR gate with 7-bits bus input');
gettext('Bus7-Split-all: Split the 7-bits bus into its wires');
gettext('Or-bus8');
gettext('OR-BUS8: OR gate with 8-bits bus input');
gettext('Bus8-Split-all: Split the 8-bits bus into its wires');
gettext('Xnor-op2');
gettext('XNOR gate: two bits input xnor gate');
gettext('XNor-x02: two input XNOR gate');
gettext('XOR gate: two bits input xor gate');
gettext('Xnor2');
gettext('Xor-op2');
gettext('Xor2');
gettext('01-AND-gate');
gettext('02-AND-gate-BUS');
gettext('03-AND-enable');
gettext('04-AND-op');
gettext('TESTs');
gettext('00-Index');
gettext('# INDEX: IceGate Collection');
gettext('## AND');
gettext('## Not ');
gettext('And-Op2');
gettext('## OR ');
gettext('## XOR');
gettext('### 2-bits');
gettext('### 3-bits');
gettext('### 4-bits');
gettext('### 8-bits');
gettext('## NAND');
gettext('## NOR');
gettext('## XNOR');
gettext('### 5-bits');
gettext('### 6-bits');
gettext('### 7-bits');
gettext('Alhambra-II');
gettext('01-And-gate-buttons-LED');
gettext('## INPUTS');
gettext('**AND Gate**');
gettext('## Example: Manual testing of the AND2 gate\n\nThe LED is only ON when the two buttons SW1 and SW2 are pressed');
gettext('## OUTPUT');
gettext('Alhambra-II');
gettext('02-And-gate-BUS-buttons-LED');
gettext('**AND-BUS2 Gate**');
gettext('## Example: Manual testing of the AND-BUS2 gate\n\nThe LED is only ON when the two buttons SW1 and SW2 are pressed');
gettext('Alhambra-II');
gettext('03-And-enable-buttons-LED');
gettext('4bits constant value: 15 (0xF in hexadecimal)');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('**AND-Busen4**');
gettext('## Example: Manual testing of the AND-Busen4 gate\n\nThe given number by the 4-bits constant (0xF by default) is displayed on the  \nLEDs when the button is pressed');
gettext('Enable button');
gettext('Alhambra-II');
gettext('04-And-op-button-LEDs');
gettext('**AND-Op4**');
gettext('## Example: Manual testing of the AND-Op4 gate\n\nThe AND-Op4 gate perform the AND operation between operand a and b.  \nWhen the button is pressed the operand b has a value (`0011` by default)  \notherwise operand b is 0');
gettext('Operand b or 0');
gettext('Enable the operand b');
gettext('`a AND b`');
gettext('And');
gettext('Nand');
gettext('Nor');
gettext('Not');
gettext('Or');
gettext('Xnor');
gettext('Xor');
gettext('And-Bus');
gettext('And-Busen');
gettext('And-Op');
gettext('And2');
gettext('And3');
gettext('And4');
gettext('And5');
gettext('And6');
gettext('And7');
gettext('And8');
gettext('And-Bus2');
gettext('And-Bus3');
gettext('And-Bus4');
gettext('And-Bus5');
gettext('And-Bus6');
gettext('And-Bus7');
gettext('And-Bus8');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND-Bus2 gate: Manual testing with two pushbutton and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Constant bit 1');
gettext('# AND-Bus3 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('2bits constant value: 3');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('# AND-Bus4 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus5-Join-2-3: Join the two buses of 2 and 3 bits into a 5-bits Bus');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('# AND-Bus5 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus6-Join-2-4: Join all the two buses into a 6-bits Bus');
gettext('# AND-Bus6 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus7-Join-2-5: Join the two buses into a 7-bits Bus');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('# AND-Bus7 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus8-Join-2-6: Join the two buses into an 8-bits Bus');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('# AND-Bus8 gate: Manual testing with pushbuttons and an LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('And-Busen-02');
gettext('And-Busen-03');
gettext('And-Busen-04');
gettext('And-Busen-05');
gettext('And-Busen-06');
gettext('And-Busen-07');
gettext('And-Busen-08');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('# AND-Busen2 gate: Manual testing with one pushbutton and two LEDs\n\nWhen the button is pressed, the two LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('3bits constant value: 7');
gettext('# AND-Busen3 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('# AND-Busen4 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('# AND-Busen5 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('# AND-Busen6 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('Generic: 7-bits generic constant (0-127)');
gettext('# AND-Busen7 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('Alhambra-II');
gettext('01-manual-test-btn-leds');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('# AND-Busen8 gate: Manual testing with one pushbutton and LEDs\n\nWhen the button is pressed, the LEDs are turned on');
gettext('And-Op-2');
gettext('And-Op-3');
gettext('And-Op-4');
gettext('And-Op-5');
gettext('And-Op-6');
gettext('And-Op-7');
gettext('And-Op-8');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op2: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 2-bits coming form the pushbuttons and a constant  \nnumber (0-3). The result is shown on LEDs 0 and 1\n\nThe number 3 is used by default. It means that the operand coming from the buttons  \nis shown on the LEDs without modification');
gettext('01-manual-test-btns-leds');
gettext('Bus3-Join-1-2: Join two buses of 2 and 1 bits into a 3-bits Bus');
gettext('# AND-Op3: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 3-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op4: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 4-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op5: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 5-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# AND-Op6: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 6-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('Bus7-Join-5-2: Join the two buses into a 7-bits Bus');
gettext('# AND-Op7: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 7-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('Bus8-Join-6-2: Join the two buses into an 8-bits Bus');
gettext('# AND-Op8: Manual testing with two pushbuttons and two LEDs\n\nThe AND operation is applied to the 8-bits coming form the pushbuttons and a constant  \nnumber. The result is shown on the LEDs\n');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND gate: Manual testing with two pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('## And Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   0    |\n| 1   |  0  |   0    |\n| 1   |  1  |   1    |');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND gate: Manual testing with three pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND5 gate: Manual testing with pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND6 gate: Manual testing with pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND7 gate: Manual testing with pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# AND8 gate: Manual testing with pushbuttons and one LED\n\nThe LED is only turned on when both buttons are pressed at the same  \ntime');
gettext('Nand2');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# NAND gate: Manual testing with two pushbuttons and one LED\n\nOnly when the two buttons are pressed at the same time, the LED0 is turned off');
gettext('## NAND Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   1    |\n| 0   |  1  |   1    |\n| 1   |  0  |   1    |\n| 1   |  1  |   0    |');
gettext('Nor2');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# NOR gate: Manual testing with two pushbuttons and one LED\n\nThe LED is only on when none of the butons is pressed');
gettext('## NOR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   1    |\n| 0   |  1  |   0    |\n| 1   |  0  |   0    |\n| 1   |  1  |   0    |');
gettext('01-bit');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('# Not gate: Manual testing with a pushbutton and an LED\n\nWhen the button SW1 is not pressed, the input is 0. The output of the  \nnot is 1 and the LED is on  \nWhen the button SW1 is pressed, the input is 1, the output 0 and the  \nLED is off');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('# Not-x2 gate: Manual testing with pushbuttons and LEDs\n\nThe two buttons are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('Constant bit 0');
gettext('# Not-x3 gate: Manual testing with pushbuttons and LEDs\n\nThe three inputs are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('2bits constant value: 0');
gettext('# Not-x4 gate: Manual testing with pushbuttons and LEDs\n\nThe four inputs are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('3bits constant value: 0');
gettext('# Not-x5 gate: Manual testing with pushbuttons and LEDs\n\nThe 5 inputs are inverted (negative logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('4bits constant value: 0');
gettext('# Not-x6 gate: Manual testing with pushbuttons and LEDs\n\nThe 6 inputs are inverted (negative logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('5bits constant value: 0');
gettext('# Not-x7 gate: Manual testing with pushbuttons and LEDs\n\nThe 6 inputs are inverted (negative logic) and displayed on the LEDs  ');
gettext('Alhambra-II');
gettext('01-manual-btn-led');
gettext('6bits constant value: 0');
gettext('# Not-x8 gate: Manual testing with pushbuttons and LEDs\n\nThe four inputs are inverted (negaive logic) and displayed on the LEDs  ');
gettext('Or-Bus');
gettext('Or2');
gettext('Or3');
gettext('Or4');
gettext('Or5');
gettext('Or6');
gettext('Or7');
gettext('Or8');
gettext('Or-Bus2');
gettext('Or-Bus3');
gettext('Or-Bus4');
gettext('Or-Bus5');
gettext('Or-Bus6');
gettext('Or-Bus7');
gettext('Or-Bus8');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus2 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus3 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus4 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR-Bus5 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus6-Join-all: Join all the wires into a 6-bits Bus');
gettext('# OR-Bus6 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus7-Join-all: Join all the wires into a 7-bits Bus');
gettext('# OR-Bus7 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Bus8-Join-all: Join all the wires into a 8-bits Bus');
gettext('# OR-Bus8 gate: Manual testing with two pushbutton and an LED\n\nThe LED is turned on when the button SW1 is pressed, or the button SW1 or both');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('## OR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   1    |\n| 1   |  0  |   1    |\n| 1   |  1  |   1    |');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR4 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR5 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR6 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR7 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# OR8 gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on if button 1 or button 2 or both are pressed. Otherwise  \nthe LED0 is off');
gettext('Xnor-op2');
gettext('Xnor2');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# XNOR-Op2: Manual testing with two pushbuttons and two LEDs\n\nThe XNOR operation is applied to the 2-bits coming form the pushbuttons and a constant  \nnumber (0-3). The result is shown on LEDs 0 and 1\n');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# XNOR gate: Manual testing with two pushbuttons and one LED\n');
gettext('## XNOR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   1    |\n| 0   |  1  |   0    |\n| 1   |  0  |   0    |\n| 1   |  1  |   1    |');
gettext('Xor-op');
gettext('Xor2');
gettext('Xor-op2');
gettext('Alhambra-II');
gettext('01-manual-test-btns-leds');
gettext('# XOR-Op2: Manual testing with two pushbuttons and two LEDs\n\nThe XOR operation is applied to the 2-bits coming form the pushbuttons and a constant  \nnumber (0-3). The result is shown on LEDs 0 and 1\n');
gettext('Alhambra-II');
gettext('01-manual-btns-led');
gettext('# XOR gate: Manual testing with two pushbuttons and one LED\n\nThe LED is turned on only if button 1 is pressed or button 2 is pressed but not  \nboth at the same time');
gettext('## XOR Truth table\n\n| i1  | i0  | output |\n|-----|-----|--------|\n| 0   |  0  |   0    |\n| 0   |  1  |   1    |\n| 1   |  0  |   1    |\n| 1   |  1  |   0    |');
